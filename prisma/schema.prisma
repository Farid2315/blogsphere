
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  password  String? // hashed password, null if OAuth only
  createdAt DateTime   @default(now())
  posts     Post[]     @relation("UserPosts")
  comments  Comment[]  @relation("UserComments")
  likes     Like[]     @relation("UserLikes")
  bookmarks Bookmark[] @relation("UserBookmarks")
  votes     Vote[]     @relation("UserVotes")

  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String     @db.ObjectId
  author    User       @relation(fields: [authorId], references: [id], name: "UserPosts")
  title     String
  content   String
  domain    String // e.g. "food", "cloth", "trends", "tours", "random"
  location  GeoPoint? // optional geo info for location-based feed
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]  @relation("PostComments")
  likes     Like[]     @relation("PostLikes")
  bookmarks Bookmark[] @relation("PostBookmarks")
  votes     Vote[]     @relation("PostVotes")

  @@map("posts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], name: "PostComments")
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], name: "UserComments")
  content   String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserLikes")
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], name: "PostLikes")
  createdAt DateTime @default(now())

  @@map("likes")
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserBookmarks")
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], name: "PostBookmarks")
  createdAt DateTime @default(now())

  @@map("bookmarks")
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserVotes")
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], name: "PostVotes")
  isValid   Boolean // true if offer/post is still valid
  createdAt DateTime @default(now())

  @@map("votes")
}

// Embedded type for geo location

type GeoPoint {
  latitude  Float
  longitude Float
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
